{"version":3,"sources":["images/kelvin.jpg","components/Navbar.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","Link","to","Home","src","require","style","paddingBottom","opacity","target","href","App","BrowserRouter","components_Navbar","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kMCgBzBC,EAZA,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,YACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,WACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,mBCeSC,SApBF,kBACXN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUI,IAAKC,EAAQ,MACtCR,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,cAAe,SAASV,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,sBAAL,IAAuD,MACpGH,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,cAAe,QAASP,UAAU,UAASH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,oCAChEF,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,cAAe,QAASP,UAAU,gBAC7CH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACE,QAAS,QACnB,OACDX,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,KAAGU,OAAO,SAASC,KAAK,sFAAxB,UACAb,EAAAC,EAAAC,cAAA,KAAGU,OAAO,SAASC,KAAK,gCAAxB,UACAb,EAAAC,EAAAC,cAAA,KAAGU,OAAO,SAASC,KAAK,iDAAxB,YACC,SAGPb,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,WAAM,yBCGRY,0LAdX,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,cAR3Be,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6f5adfa3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kelvin.6e4c7d27.jpg\";","import React, { Component } from 'react';\nimport '../styles/navbar.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nconst Navbar = () => (\n    <div className=\"navbar\">\n      <Link to=\"/\">// About</Link>\n      <Link to=\"/\">// Work</Link>\n      <Link to=\"/\">// Experience</Link>\n\n      {/*<Route exact path=\"/\" component={App} />*/}\n      {/*<Route path=\"/about\" component={App} />*/}\n      {/*<Route path=\"/topics\" component={App} />*/}\n    </div>\n);\n\nexport default Navbar;","import React from 'react';\nimport '../styles/home.css';\n\nconst Home = () => (\n  <div className=\"mainContent\">\n    <img className=\"mainPic\" src={require('../images/kelvin.jpg')}/>\n    <div style={{paddingBottom: '20px'}}><p>1</p><div><span className=\"name\">_Kelvin Masilamani</span> {'{'}</div></div>\n    <div style={{paddingBottom: '20px'}} className=\"indent\"><p>2</p><div>developer.FrontEnd ;</div></div>\n    <div style={{paddingBottom: '20px'}} className=\"indent line3\">\n      <p>3</p>\n        <div style={{opacity: '0.5'}}>\n          {'/*  '}\n          <a>email</a>\n          <a target=\"_blank\" href=\"https://drive.google.com/file/d/1akQ3a0t696R5dUUmknHNyGXmWyoqQQsy/view?usp=sharing\">resume</a>\n          <a target=\"_blank\" href=\"https://github.com/kmasila00\">github</a>\n          <a target=\"_blank\" href=\"https://www.linkedin.com/in/kelvin-masilamani\">linkedin</a>\n          {'  */'}\n        </div>\n    </div>\n    <div><p>4</p><div>{'}'}</div></div>\n  </div>\n);\n\nexport default Home;","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport '../styles/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"leftBorder\"/>\n          <div className=\"appMain\">\n            <Navbar/>\n            <Route exact path=\"/\" component={Home} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}